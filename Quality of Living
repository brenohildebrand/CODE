//IOI 10 - Quality of Living
//Idea: https://dmoj.ca/src/1626399:
/*
      I do binary search on the smallest median. I create a RxC matrix T
      that for T[i][j]=-1 if Q[i][j]<mid 0 if Q[i][j]=mid else 1. 
      
      So if in some HxW subrectangle the sum is non positive we know that the solution is at most mid.
      
      By mraron  
*/
  
//Here we go!
#include <iostream>
#include "quality.h"
using namespace std;
const int MAXN = 3001;

int sum[MAXN][MAXN];

int rectangle(int R, int C, int H, int W, int Q[MAXN][MAXN]){

	//Buscabin
	int l,r, mid;
	int ans = 0;
	l = 1;
	r = 10000000;

	while(l <= r){

		mid = (l+r)/2;

		for(int i=0; i<MAXN; i++)
			for(int j=0; j<MAXN; j++)
				sum[i][j] = 0;

		//Build the current sum matrix
		//inicializing
		for(int i=0; i<R; i++)
			for(int j=0; j<C; j++){

				if(Q[i][j] > mid) sum[i][j] = 1;
				if(Q[i][j] == mid) sum[i][j] = 0;
				if(Q[i][j] < mid) sum[i][j] = -1;

			}

		//Suming prefixes
		for(int i=0; i<R; i++)
			for(int j=0; j<C; j++){

				if(i > 0) sum[i][j] += sum[i-1][j];
				if(j > 0) sum[i][j] += sum[i][j-1]; 

				if(i > 0 && j > 0) sum[i][j] -= sum[i-1][j-1];

			}

		//Now, let's verify if some of the possible rectangles
		//have the median greater or equal to mid (in both cases
		//we have to look for a number less than mid, otherwise
		//we have to look for some number greater than mid)

		bool ok = false;
		for(int i=0; i+H-1 < R && !ok; i++){
			for(int j=0; j+W-1 < C && !ok; j++){

				//For each possible rectangle
				int x = i+H-1;
				int y = j+W-1;

				int currentsum = sum[x][y] - (i>0?sum[i-1][y]:0) - (j>0?sum[x][j-1]:0) + (i>0 && j>0? sum[i-1][j-1]:0);

				ok|=currentsum<=0;

			}
		}

		if(ok){
			r = mid-1;
			ans = mid;
		}
		else l = mid+1;

	}

	return ans;

}
