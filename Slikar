//COCI '06 - Contest 1 #4 Slikar 
/*

  The main idea of the code is doing a BFS starting from different squares.
  We always have to do a BFS from the flooded squares (function BFS) making the neghboors a '*' and after this we have to do
  a BFS (function SOLVE) from the paths we are doing with the "character" S and save the total distance already traveled for
  each position. Every time we arrived, we update the answer and make the bool ok equal true.
  After all we print the ans, if it is possible.
  
*/

#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second

const int MAXN = 60;
int R,C, ans = 30000, qtd, qtd2 = 1;
bool ok = false;
int ichegada, jchegada, ipartida, jpartida;
char matriz[MAXN][MAXN];
bool mark[MAXN][MAXN];
queue<pair<int,int> > filainundada;
queue< pair< pair<int,int>,int > > filasolve;

int tx[4] = {0,0,1,-1};
int ty[4] = {1,-1,0,0};

void BFS(){

    int nova = 0;

    //Tem que rodar uma camada por vez
    while(qtd>0){

        qtd--;

        pair<int,int> atual = filainundada.front();
        filainundada.pop();

        for(int i=0; i<4; i++){

            pair<int,int> viz = make_pair(atual.x+tx[i], atual.y+ty[i]);
            if(matriz[viz.x][viz.y] == '.'){
                matriz[viz.x][viz.y] = '*';
                filainundada.push({viz.x, viz.y});
                nova++;
            }
        }
    }

    qtd = nova;
}

void SOLVE(){

    filasolve.push({{ipartida, jpartida}, 0});

    while(!filasolve.empty()){

        if(!filainundada.empty()) BFS();

        int novo2 = 0;

        while(qtd2>0){

            qtd2--;

            pair<pair<int,int>, int> atual = filasolve.front();
            filasolve.pop();

            //if(matriz[atual.x.x][atual.x.y] == '*') continue;

            if(mark[atual.x.x][atual.x.y]) continue;
            mark[atual.x.x][atual.x.y] = true;

            for(int i=0; i<4; i++){

                pair<int,int> viz = make_pair(atual.x.x+tx[i], atual.x.y+ty[i]);
                //cout << "VIZ: " << viz.x << " " << viz.y << endl;

                if(mark[viz.x][viz.y]) continue;

                if(matriz[viz.x][viz.y] == '.'){
                    filasolve.push({{viz.x, viz.y}, atual.y+1});
                    novo2++;
                }else if(viz.x == ichegada && viz.y == jchegada){
                    ans = min(ans, atual.y+1);
                    ok = true;
                }
            }

            /*
            cout << endl;
            for(int i=1; i<=R; i++){
                for(int j=1; j<=C; j++){
                    cout << matriz[i][j] << " ";
                }
                cout << endl;
            }
            */
        }

        qtd2 = novo2;

    }

    return;
}

int main(){

    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    //Reading
    cin >> R >> C;

    for(int i=1; i<=R; i++){
        string s;
        cin >> s;
        for(int j=0; j<C; j++){
            matriz[i][j+1] = s[j];
            if(matriz[i][j+1] == 'S'){
                ipartida = i;
                jpartida = j+1;
            }
            if(matriz[i][j+1] == 'D'){
                ichegada = i;
                jchegada = j+1;
            }
            if(matriz[i][j+1] == '*'){
                filainundada.push({i,j+1});
                qtd++;
            }
        }
    }

    //Solving
    SOLVE();

    if(ok)
        cout << ans << "\n";
    else
        cout << "KAKTUS" << "\n";

    return 0;
}

