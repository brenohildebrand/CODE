//SPOJ - Disquery

/*
  
  I used LCA to do this and binary lifting (sparse table).
  LCA was just for calculate the longest common ancestor and
  sparse_table was used for find the minimum and maximum of 
  between two nodes on the same branch, i.e., for find the 
  minimum or maximum between to nodes such that the LCA between 
  them was one of them.
  
  Note:
  sp[][][0] is the sparse_table of the nodes
  sp[][][1] is the sparse_table of the maximum
  sp[][][2] is the sparse_table of the minimum
  
*/

#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second

const int MAXN = 100100;
const int MAXL = 25;
const int INF = 0x3f3f3f3f;
int n,k;
int pai[MAXN], nivel[MAXN], distpai[MAXN];
int sp[MAXN][MAXL][3];
int maxdist[MAXN][MAXL], mindist[MAXN][MAXL];
vector<pair<int,int> > viz[MAXN];

void dfs(int f, int p, int dist){

	nivel[f] = nivel[p]+1;
	pai[f] = p;
	distpai[f] = dist;

	for(int i=0; i<viz[f].size(); i++){

		int v = viz[f][i].x;
		if(v == p) continue;

		dfs(v,f, viz[f][i].y);

	}

}

void building(){

	for(int i=0; i<MAXN; i++)
		for(int j=0; j<MAXL; j++){
			sp[i][j][0] = -1;
			sp[i][j][1] = -1;
			sp[i][j][2] = INF;
		}

	for(int i=1; i<=n; i++){
		sp[i][0][0] = pai[i];
		sp[i][0][1] = distpai[i];
		sp[i][0][2] = distpai[i];
	}

	for(int j=1; j<MAXL; j++)
		for(int i=1; i<=n; i++)
			if(sp[i][j-1][0] != -1){
				sp[i][j][0] = sp[sp[i][j-1][0]][j-1][0];
				if(sp[i][j][0] != -1){
					sp[i][j][1] = max(sp[i][j-1][1], sp[sp[i][j-1][0]][j-1][1]);
					sp[i][j][2] = min(sp[i][j-1][2], sp[sp[i][j-1][0]][j-1][2]);
				}
			}

}

void LCA(int a, int b){

	int lca = 0, minimo = INF, maximo = 0;
	int aoriginal = a;
	int boriginal = b;

	if(nivel[a] < nivel[b]) swap(a,b);

	for(int i=MAXL-1; i>=0; i--)
		if(nivel[a] - (1<<i) >= nivel[b])
			a = sp[a][i][0];

	if(a==b) lca = a;
	else{
		for(int i=MAXL-1; i>=0; i--)
			if(sp[a][i][0] != -1 && sp[a][i][0] != sp[b][i][0]){
				a = sp[a][i][0];
				b = sp[b][i][0];
			}
		lca = sp[a][0][0];
	}

	//Já tenho a lca e agora é só pegar o mínimo e o máximo
	//Pega o maximo
	a = aoriginal; b = boriginal;

	for(int i=MAXL-1; i>=0; i--)
		if(nivel[a] - (1<<i) >= nivel[lca]){
			maximo = max(maximo, sp[a][i][1]);
			a = sp[a][i][0];
		}

	for(int i=MAXL-1; i>=0; i--)
		if(nivel[b] - (1<<i) >= nivel[lca]){
			maximo = max(maximo, sp[b][i][1]);
			b = sp[b][i][0];
		}

	//Pega o minimo
	a = aoriginal; b = boriginal;

	for(int i=MAXL-1; i>=0; i--)
		if(nivel[a] - (1<<i) >= nivel[lca]){
			minimo = min(minimo, sp[a][i][2]);
			a = sp[a][i][0];
		}

	for(int i=MAXL-1; i>=0; i--)
		if(nivel[b] - (1<<i) >= nivel[lca]){
			minimo = min(minimo, sp[b][i][2]);
			b = sp[b][i][0];
		}

	cout << minimo << " " << maximo << "\n";

}

int main(){

	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

	cin >> n;

	for(int i=1; i<n; i++){

		int a,b,c;
		cin >> a >> b >> c;
		viz[a].push_back(make_pair(b,c));
		viz[b].push_back(make_pair(a,c));

	}

	dfs(1, 0, 0);
	pai[1] = -1;
	building();

	cin >> k;

	for(int i=1; i<=k; i++){

		int a,b;
		cin >> a >> b;
		LCA(a,b);

	}

	return 0;
}
